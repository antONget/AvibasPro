import asyncio
import random

from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, StateFilter, or_f

from database import requests as rq
from keyboards import user_keyboard_select_station as kb
from utils.error_handling import error_handler
from services.zeep_soap import get_bus_stops, get_destinations

import logging

router = Router()
router.message.filter(F.chat.type == "private")


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ButtonBack(StatesGroup):
    back_departure = State()
    back_destination = State()


@router.message(CommandStart())
@router.message(F.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@error_handler
async def process_press_start(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info('process_press_start')
    await state.set_state(state=None)
    if message.from_user.username:
        username = message.from_user.username
    else:
        username = 'USER'
    data_user = {'tg_id': message.from_user.id, 'username': username}
    await rq.add_user(data=data_user)
    await message.answer(text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–µ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –∞–≤—Ç–æ–±—É—Å—ã –ø—Ä–∏–≥–æ—Ä–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.'
                              f' –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç—ã –Ω–∞ –ª—é–±–æ–π –º–∞—Ä—à—Ä—É—Ç,'
                              f' –≤—ã–±—Ä–∞–≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.',
                         reply_markup=kb.keyboard_main_button())


@router.message(F.text == '–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
@error_handler
async def press_button_pay_ticket(message: Message, bot: Bot, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞
    :param message:
    :param bot:
    :param state:
    :return:
    """
    logging.info('press_button_pay_ticket')
    await message.answer(text='–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–π—Å –∏ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏, –æ—Ñ–æ—Ä–º–∏—Ç—å –±–∏–ª–µ—Ç',
                         reply_markup=kb.keyboard_major_button())
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                         reply_markup=kb.keyboards_select_start_station())


@router.callback_query(F.data == 'select_start_station_other')
@error_handler
async def select_start_station_other(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –í—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é)
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info('select_start_station_other')
    await state.set_state(ButtonBack.back_departure)
    dict_get_bus_stops: list[dict] = await get_bus_stops()
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–π –±—É–∫–≤—ã(–±—É–∫–≤) –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–ü–£–ù–ö–¢–ê –û–¢–ü–†–ê–í–õ–ï–ù–ò–Ø</b>',
                                     reply_markup=
                                     kb.keyboards_select_first_word_station(dict_get_bus_stops=dict_get_bus_stops,
                                                                            count_letter=1))
    await callback.answer()


@router.callback_query(F.data.startswith('select_start_station_letter_'))
@error_handler
async def select_start_station_first_letter(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –í—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –±—É–∫–≤–∞–º
    :param callback: select_start_station_letter_{count_letter}_{first_letter[:count_letter]}
    count_letter - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    first_letter[:count_letter] - –Ω–∞–±–æ—Ä –±—É–∫–≤ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    :param state:
    :param bot:
    :return:
    """
    logging.info('select_start_station_first_letter')
    dict_get_bus_stops: list[dict] = await get_bus_stops()
    count_letter = int(callback.data.split('_')[-2]) + 1
    first_letter = callback.data.split('_')[-1]
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–π –±—É–∫–≤—ã(–±—É–∫–≤) –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–ü–£–ù–ö–¢–ê –û–¢–ü–†–ê–í–õ–ï–ù–ò–Ø</b>',
                                     reply_markup=
                                     kb.keyboards_select_first_word_station(dict_get_bus_stops=dict_get_bus_stops,
                                                                            count_letter=count_letter,
                                                                            letter=first_letter))
    await callback.answer()


@router.callback_query(F.data.startswith('select_start_station_'))
@error_handler
async def select_finish_station(callback: CallbackQuery, state: FSMContext, bot: Bot, press_button_back: bool = False):
    """
    –í—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
    :param callback: select_start_station_{station[-1]}
    {station[-1]} - Id –∞–≤—Ç–æ–±—É—Å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    :param state:
    :param bot:
    :return:
    """
    logging.info('select_finish_station')
    await state.set_state(ButtonBack.back_departure)
    if press_button_back:
        data = await state.get_data()
        departure = data["departure"]
    else:
        departure: str = callback.data.split('_')[-1]
        await state.update_data(departure=departure)
    dict_get_bus_stops: list[dict] = await get_destinations(departure=departure)
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–π –±—É–∫–≤—ã(–±—É–∫–≤) –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–ü–£–ù–ö–¢–ê –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø</b>',
                                     reply_markup=
                                     kb.keyboards_select_first_word_station_finish(dict_get_bus_stops=dict_get_bus_stops,
                                                                                   count_letter=1))
    await callback.answer()


@router.callback_query(F.data.startswith('select_finish_station_letter_'))
@error_handler
async def select_finish_station_letter(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –í—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –±—É–∫–≤–∞–º
    :param callback: select_finish_station_letter_{count_letter}_{first_letter[:count_letter]}
    count_letter - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    first_letter[:count_letter] - –Ω–∞–±–æ—Ä –±—É–∫–≤ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—Ç–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    :param state:
    :param bot:
    :return:
    """
    logging.info('select_finish_station_letter')
    await state.set_state(ButtonBack.back_destination)
    data: dict = await state.get_data()
    dict_get_bus_stops: list[dict] = await get_destinations(departure=data['departure'])
    count_letter: int = int(callback.data.split('_')[-2]) + 1
    first_letter: str = callback.data.split('_')[-1]
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–π –±—É–∫–≤—ã(–±—É–∫–≤) –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–ü–£–ù–ö–¢–ê –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø</b>',
                                     reply_markup=
                                     kb.keyboards_select_first_word_station_finish(dict_get_bus_stops=dict_get_bus_stops,
                                                                                   count_letter=count_letter,
                                                                                   letter=first_letter))
    await callback.answer()


@router.callback_query(F.data == 'back_dialog')
@error_handler
async def back_dialog(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info('back_dialog')
    current_state = (await state.get_state()).split(':')[-1]
    if current_state == 'back_departure':
        await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                                         reply_markup=kb.keyboards_select_start_station())
    elif current_state == 'back_destination':
        await select_finish_station(callback=callback, state=state, bot=bot, press_button_back=True)
