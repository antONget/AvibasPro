from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import time, timedelta, datetime
import logging


def keyboards_trip(list_routers: list):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–π—Å–æ–≤
    :param list_routers:
    :return:
    """
    logging.info(f"keyboards_trip")
    # [rout['Id'], rout['RouteNum'], rout['DepartureTime']
    kb_builder = InlineKeyboardBuilder()
    buttons = []
    for rout in list_routers:
        data_trip = rout[2].strftime("%H:%M")
        text = f'‚Ññ {rout[1]} - {data_trip}'
        callback = f'router_{rout[0]}'
        buttons.append(InlineKeyboardButton(
            text=text,
            callback_data=callback))
    kb_builder.row(*buttons, width=1)
    return kb_builder.as_markup()


seats_scheme_default = [[1, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1],
                        [1, 1, 1, 1, 1]]


def keyboards_seat(seats_scheme: list[dict] = None, seats_reserved: list[dict] = None, show_row: int = 4, block: int = 0):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ—Å—Ç–∞
    :param seats_scheme:
    [
        {
            'XPos': 14,
            'YPos': 5,
            'SeatNum': 49,
            'AvailableFares': '–°—Ç–æ—è;–†—É—á–Ω–∞—è –∫–ª–∞–¥—å;–ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π;–î–µ—Ç—Å–∫–∏–π –±–µ–∑ –º–µ—Å—Ç;–î–µ—Ç—Å–∫–∏–π;–ë–∞–≥–∞–∂–Ω—ã–π'
        }
    ]
    :param seats_reserved:
    [
        {
            'Type': 'Passenger',
            'Number': 1,
            'Status': 'Reserved',
            'ParentTicketSeatNum': 0,
            'ForCurrentOrder': False
        }
    ]
    :param show_row:
    :param block:
    :return:
    """
    logging.info(f"keyboards_seat")
    seats_scheme_ = []
    if not seats_scheme:
        seats_scheme_ = seats_scheme_default
    else:
        i = 1  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ä—è–¥–æ–≤ –≤ —Å—Ö–µ–º–µ –ø–æ—Å–∞–¥–∫–∏
        row = []  # —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ –≤ —Ä—è–¥—É
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ—Å–∞–¥–∫–∏
        for seat_row in seats_scheme:
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä—è–¥ –ø–æ—Å–∞–¥–∫–∏
            if seat_row['XPos'] == i:
                if seat_row['YPos'] == 6:
                    continue
                # –µ—Å–ª–∏ –º–µ—Å—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
                if seat_row['SeatNum']:
                    row.append(seat_row['SeatNum'])
                else:
                    row.append(0)
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä—è–¥
            else:
                i += 1
                seats_scheme_.append(row)
                row = []
                # –µ—Å–ª–∏ –º–µ—Å—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
                if seat_row['SeatNum']:
                    row.append(seat_row['SeatNum'])
                else:
                    row.append(0)
        # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        if row:
            seats_scheme_.append(row)
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ä–µ–∑–µ—Ä–≤–∞
        list_reserved = []
        # print("SEAT_RESERVED", seats_reserved, sep='\n')
        for reserved_item in seats_reserved:
            list_reserved.append(reserved_item['Number'])
    kb_builder = InlineKeyboardBuilder()
    buttons = []
    row = 0
    # print("LIST_RESERVED", list_reserved, sep='\n')
    # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç
    for seats in seats_scheme_[show_row*block:show_row*(block+1)]:
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ —Ä—è–¥–∞–º
        row += 1
        # [3, 4, 0, 2, 1]
        for item in seats:
            # –µ—Å–ª–∏ –º–µ—Å—Ç–æ –≤ –ø–æ–∑–∏—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏ –Ω–µ –∑–∞–Ω—è—Ç–æ - üü©, –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–æ - üü•, –µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ - ‚¨úÔ∏è
            if item:
                if item not in list_reserved:
                    text = f'{item} üü©'
                    callback = f'select_seat_{item}'
                else:
                    text = f'{item} üü•'
                    callback = f'select_seat_busy'
                buttons.append(InlineKeyboardButton(text=text, callback_data=callback))
            else:
                text = '‚¨ú'
                callback = f'select_seat_default'
                buttons.append(InlineKeyboardButton(text=text, callback_data=callback))
    kb_builder.row(*buttons, width=len(seats_scheme_[0]))
    # –±–ª–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä—è–¥–∞–º–∏
    seat_block = []
    temp1 = 0
    temp2 = 0
    # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤ –≤ —Å—Ö–µ–º–µ –±–æ–ª—å—à–µ —á–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    if len(seats_scheme_) > show_row:
        # # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫
        # count_block = len(seats_scheme_) // show_row
        i = -1
        for row1, row2 in zip(seats_scheme_[::show_row], seats_scheme_[show_row-1::show_row]):
            i += 1
            temp1 = sorted(row1)[1]
            temp2 = max(row2)
            text = f'{temp1} - {temp2}'
            callback = f'select_count_block_{i}'
            seat_block.append(InlineKeyboardButton(text=text, callback_data=callback))
        if len(seats_scheme_) % show_row:
            count_block = len(seats_scheme_) // show_row
            temp1 = sorted(seats_scheme_[count_block*show_row])[1]
            temp2 = max(seats_scheme_[-1])
            text = f'{temp1} - {temp2}'
            callback = f'select_count_block_{i+1}'
            seat_block.append(InlineKeyboardButton(text=text, callback_data=callback))
    kb_builder.row(*seat_block, width=2)
    return kb_builder.as_markup()


def keyboard_confirm() -> InlineKeyboardMarkup:
    button_1 = InlineKeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç—å –±–∏–ª–µ—Ç', callback_data='confirm')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_1]])
    return keyboard


def keyboard_pay_ticket() -> InlineKeyboardMarkup:
    button_1 = InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç', callback_data='pay_ticket')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_1]])
    return keyboard
